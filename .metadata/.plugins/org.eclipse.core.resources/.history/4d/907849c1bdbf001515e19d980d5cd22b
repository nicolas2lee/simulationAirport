package enstabretagne.SimEntity.airplane;

import java.util.List;

import enstabretagne.SimEntity.airport.Airport;
import enstabretagne.base.utility.IRecordable;
import enstabretagne.base.utility.Logger;
import enstabretagne.messages.Messages;
import enstabretagne.simulation.components.IEntity;
import enstabretagne.simulation.components.SimEntity;
import enstabretagne.simulation.components.SimFeatures;
import enstabretagne.simulation.components.SimInitParameters;
import enstabretagne.simulation.core.SimEngine;
import enstabretagne.simulation.core.SimObject;
import enstabretagne.simulation.core.SimObjectRequest;

public class Airplane extends SimEntity implements IAirplane, IRecordable{

	String airplaneId ;
	StateAirplane currnetState;
	SimObjectRequest opendAirportRequest;
	
	public Airplane(SimEngine engine, String name, SimFeatures features) {
		super(engine, name , features);
		
		setAirplaneState(StateAirplane.Arriving);
		opendAirportRequest = new SimObjectRequest(){

			@Override
			public boolean filter(SimObject o) {
				if (Airport.class.isAssignableFrom(o.getClass())){
					Airport a = (Airport) o;
					if (a.isOpened()){
						return true;
					}
				}
				return false;	
			}
		};
	}
	
	private void setAirplaneState(StateAirplane state) {
		
		currnetState = state;
		
	}

	public String getAirplaneId() {
		return airplaneId;
	}

	public void setAirplaneId(String airplaneId) {
		this.airplaneId = airplaneId;
	}

	

	@Override
	public String[] getTitles() {
		String[] titles={"Wait time"};
		return titles;
	}

	@Override
	public String[] getRecords() {
		String[] rec;
		rec= new String[]{""};
		return null;
	}

	@Override
	public String getClassement() {
		
		return "Airplanes";
	}

	@Override
	public void onParentSet() {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void InitializeSimEntity(SimInitParameters init) {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void AfterActivate(IEntity sender, boolean starting) {
		arriveAirport();
		
	}

	SimObjectRequest openedAirportRequest;
	private Airport findOpendAirport(){
		List<SimObject> a = getEngine().requestSimObject(openedAirportRequest);
		if (a.size()> 0){
			return (Airport) a.get(0);
		}else
			return null;
	}
	
	@Override
	public Airport arriveAirport() {
		Airport a = findOpendAirport();
		if (a!=null){
			setAirplaneState(StateAirplane.NotifyBeginArrive);
			Logger.Information(this, "NotifyBeginArrive", Messages.NotifyBeginArrive, this.getName());
			waitTrackAndTW1(a);
			return a;
			
		}else{
			return null;
		}
	}
	
	@Override
	public boolean waitTrackAndTW1(Airport a) {
		setAirplaneState(StateAirplane.WaitForTW1AndTrack);
		Logger.Information(this, "WaitForTW1AndTrack", Messages.WaitForTW1AndTrack, this.getName());
		if (a.isTrackFull() && a.isTW1Full())
			return true;
		else{
			closeToAirport();
			
			return false;
		}
	}

	@Override
	public void closeToAirport() {
		setAirplaneState(StateAirplane.CloseToAirport);
		Logger.Information(this, "CloseToAirport", Messages.CloseToAirport, this.getName());
		landing();
	}
	
	@Override
	public void landing() {
		setAirplaneState(StateAirplane.Landing);
		Logger.Information(this, "CloseToAirport", Messages.CloseToAirport, this.getName());
		
	}

	
	@Override
	public StatusAirplane getStatusAirplane() {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	protected void BeforeDeactivating(IEntity sender, boolean starting) {
		// TODO Auto-generated method stub
		
	}




	

}
